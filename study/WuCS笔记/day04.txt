1. Git代码提交
	1.1. 场景1：创建仓库与仓库初始化；
	1.2. 场景2：建立分支提交代码到分支；
		01. 创建工作目录
		02. 初始化仓库
			git init
		----------------准备工作
		03. 建立服务器代理
			git remote add origin http://yangqiang:yang123@39.98.127.39:3000/yangqiang/Test2019.git

			--删除
			git remote rm  代理名

		04. 拉取代码
			git pull --rebase origin master    # master是主分支名，也可以直接拉取某个分支
		----------------拉取代码
		05. 查看分支
			git branch
		06. 创建分支
			git branch 分支名

		07. 切换分支
			git checkout 分支名

		----------------分支操作
		08. 开始开发，产生目录与代码

		09. 添加新的文件到仓库
			git add *
		10. 设置提交的消息
			git commit -m  更新了GUI  -a
		11. 提交
			git push --set-upstream origin louis

	1.3. 场景3：最终或者阶段成果代码的分支合并；
		01. 创建工作目录
		02. 克隆服务器仓库
			git clone http://yangqiang:yang123@39.98.127.39:3000/yangqiang/Test2019

		03. 拉取需要合并的分支（同时切换本地分支）
			git checkout -b louis  origin/louis
		04. 合并分支
			- 注意：确保在master分支进行合并：把分支合并到master
			git merge louis
		05. 提交主分支到仓库
			. 添加代码带仓库
				git add  *

			. 设置提交信息
				git commit -m 第一阶段合并 -a
			. 物理更新文件
				git push --set-upstream origin master 

	提示：技巧就是完整的练习2遍。

-----------------------------------------（人工智能应用程序： App GUI）
2. 面向对象（继承）：代码复用---|
3. Qt编程：编程模式      ------|--合并
	问题：
		实现的类的使用
			|- 直接使用：对象化，调用
			|- 继承使用（subclass子类化使用）

	不使用自己写的类，而是使用别人的。

	3.1. 安装第三方模块
	pip install PyQt5
	技巧：1.在百度输入 pip 模块名，就能获取安装帮助
		  2. pip list 查看所有安装的模块
		  3. pip list  | find "查找的关键字"

	3.2. 安装Qt的工具
		链接：https://pan.baidu.com/s/1U_2U6-58HJdjS_ZyOq4zPg 
		提取码：9bun 
		复制这段内容后打开百度网盘手机App，操作更方便哦--来自百度网盘超级会员V3的分享

	3.3. 使用类
		创建对象
		调用对象的成员函数完成数据处理
	3.4. Qt应用编程模式
		
		01.创建QApplication （管理应用程序）
		02.创建窗体与组件
		03.Application阻塞监控事件


		---补充
		QtWidgets ： Qt GUI所有的类
		QtCore ： 负责系统层面的封装：QThread
		QtGui： 负责底层的图形绘制
		使用动态库
			与python的模块完全一样
			调用dll像python模块一样调用，参考：https://www.jianshu.com/p/f99160feb8fd
		---补充
		import与from的使用
		import PyQt5.QtWidgets          = from PyQt5.QtWidgets import QApplication, QDialog
			PyQt5.QtWidgets.QAppliction              QApplication


	3.5. 继承使用（override）
		： 复用
		： 创新：overide， 添加新的过程

	------
	帮助文档：
		https://doc.qt.io/qt-5/classes.html

		编程模式：
			继承QApplication         -------|
				|- 继承窗体QDialog   --------| - 类与类的关系： 依赖关系： 聚合关系 ： 包含关系




4. Qt高级编程：交互（事件+信号与槽）
	4.1. 事件
		override：实现自己的事件处理一定要继承：函数必须与父类完全一致

		事件的数据处理略微麻烦。

	4.2. 信号与槽
		：并不是每个交互都是事件：
			|- 在事件中根据事件的条件：产生很多回调（信号：槽）
				| - 确定信号
				| - 根据信号的原型，实现槽
				| - 保定信号与槽 


作业
	1. 练习Git
	2. 写一个登录的Qt
		- QApplication
		- QDialog
		- QLabel
		- QPushButton
		- QLineEdit

	3. 提交作业到我的仓库：http://39.98.127.39:3000/yangqiang/HW2019_1.git
		使用分子提交

	要求：每次课使用不同的目录
			建议day01, day02, ...

