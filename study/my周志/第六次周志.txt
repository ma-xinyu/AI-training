1. 工程任务：
	1. 技术结构
		UI层
		|
		视频采集层
		|
		AI推理 <- 模型训练
		|
		应用业务
	2. （processon上绘制）
	类图：
	processon使用记录（配合截图）：
		1.类中+公有，-私有；python中__私有，公有；
		2.类中的孤儿数据和孤儿函数：与函数/数据无联系（删掉）
		3.主模块运行应用----->
		4.XTh(QThread)类中：数据采集
		5.Login界面举例

		6.两个对话框 登录界面over，进入监控的界面MainFrame
		7.MainBiz：逻辑处理
		8.DAO数据库的类（未详尽讲解）
		
		9.XApp包含LoginFrame，对它进行初始化
		10.调用：例子：LoginFaceTh的close() 在 LoginFrame的closeEvent() 中调用
		11.原则！：数据在哪里，方法就在哪里

	时序图：（用类建结点）（时序图是面向对象的流程图）
		1.返回对象画实线，返回值画虚线


	3. 项目目录结构（包路径）与模块结构
	（看例子）：包路径：uis(图形界面)、dao(数据访问层的接口)、biz(业务处理)、aicv(人工智能接口)


project过程中需要提交的things：
	1. 《XXX程序》简略设计文档
		封面（武大logo、队伍名···）
		修改日志（更新日期、撰写者、备注）
		版权申明 （warning）
		正文：
			序言：概述（目的，参考文档），背景（别人的工作），项目作用，意义
			项目框架结构设计：结构设计图（一起写），结构说明（分工）
			项目类图设计：类图，时序图，类图的说明（作用，成员，函数（必要时有状态图和流程图说明））

	2. 项目工程-> Git服务器
		完成GUI

	3. 完成任务分工表
		任务，任务描述，责任人，完成时间，工期 ，交付物，要求， 完成度 -> 石墨文档


2. 分类器：
该函数或模型能够把数据库中的数据纪录映射到给定类别中的某一个，从而可以应用于数据预测。
总之，分类器是数据挖掘中对样本进行分类的方法的统称，包含决策树、逻辑回归、朴素贝叶斯、神经网络等算法。

影响一个分类器错误率的因素
　　(1)、训练集的记录数量。生成器要利用训练集进行学习，因而训练集越大，分类器也就越可靠。
			然而，训练集越大，生成器构造分类器的时间也就越长。错误率改善情况随训练集规模的增大而降低。
　　(2)、属性的数目。更多的属性数目对于生成器而言意味着要计算更多的组合，使得生成器难度增大，需要的时间也更长。
			有时随机的关系会将生成器引入歧途，结果可能构造出不够准确的分类器（这在技术上被称为过分拟合）。
			因此，如果我们通过常识可以确认某个属性与目标无关，则将它从训练集中移走。
　　(3)、属性中的信息。有时生成器不能从属性中获取足够的信息来正确、低错误率地预测标签（如试图根据某人眼睛的颜色来决定他的收入）。
			加入其他的属性（如职业、每周工作小时数和年龄），可以降低错误率。
　　(4)、待预测记录的分布。如果待预测记录来自不同于训练集中记录的分布，那么错误率有可能很高。

评估方法：
有两种方法可以用于对分类器的错误率进行评估，它们都假定待预测记录和训练集取自同样的样本分布。
　　(1) 保留方法(Holdout)
　　(2) 交叉纠错方法(Cross validation)

	分类器中提到的概念：
	        线性回归
	        误差基本服从正态分布
	        逻辑分布代替正态分布，区别：逻辑分布有累积函数
	        最大似然函数：越大越好
	        损失函数：越小越好	交叉熵，梯度下降法
	步骤：
		加载数据集
		定义学习的w， b

		# 循环
		计算预测值
	 	使用交叉熵计算损失值
		求导数（求导只能用float型）
		更新w，b


感想：
	1.“就是不会画所以才要画”，不去了解并且尝试学习，永远都学不会
	有很多看起来高不可攀的技术和知识，不去尝试学习和了解，它永远高高在上，遥不可攀
	学习就要乐于尝试，尝试的过程就是积累经验、不断进步的过程
	
	2.原理的理解真的迷迷糊糊，多看几遍吧···，在理解这些公式在项目中起到的作用的前提下，
	再去理解会轻松一些

作业：
	1. 完成鸢尾花分类
		安装 sklearn ：在 pip install numpy、matplotlib、scipy环境下
				pip install sklearn


